[[ -e "$HOME/.ssh/config" ]] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh

function p() {
    [[ -z ${__P_PROJECT_PATH+x} ]] && echo '__P_PROJECT_PATH not found.' && return 1
    [[ $# -ne 1 ]] && cat << EOF && return 1
Usage: p [directory-name]
Navigate to your project quickly. 
EOF
    local path paths numberOfProjects searchTerm
    searchTerm="$1"
    paths=$(find $__P_PROJECT_PATH -maxdepth ${__P_MAX_DEPTH:-1} -type d -name $searchTerm)
    numberOfProjects=$(wc -l <<< "$paths")
    if [[ $numberOfProjects -eq 1 ]]; then
        path=$(sed '1q;d' <<< "$paths")
        [[ -d "$path" ]] && cd "$path" && pwd && [[ ! -z ${__P_POST_CMD+x} ]] && eval ${__P_POST_CMD}
        return 0
    elif [[ $numberOfProjects -gt 1 ]]; then
        nl <<< "$paths"
        while true; do
            read -p "Select project (1-$numberOfProjects): " index
            if [[ $index =~ ^[0-9]+$ ]]; then
                path=$(sed "${index}q;d" <<< "$paths")
                [[ -d "$path" ]] && cd "$path" && pwd && [[ ! -z ${__P_POST_CMD+x} ]] && eval ${__P_POST_CMD}
                return 0
            fi
        done
    fi
    echo "Project not found: $searchTerm"
    return 1
}

function _p() {
    [[ -z ${__P_PROJECT_PATH+x} ]] && return 1
    local curr potentials 
    curr="${COMP_WORDS[COMP_CWORD]}"
    potentials=$(find $__P_PROJECT_PATH -maxdepth ${__P_MAX_DEPTH:-1} -type d | grep -o -E "[^/]*$")
    COMPREPLY=( $(compgen -W "${potentials}" -- ${curr}) )
}
complete -F _p p

function f() {
    [[ $# -ne 1 ]] && cat << EOF && return 1
Usage: f [search-term]
Find file name from current folder.
EOF
    local tmpFolder="/tmp/_f_findings"
    find . -iname "*$1*" | tee $tmpFolder | nl
}

function f#() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: f# [0..n]
Show file path from `f` results. You have to use `f` first.
EOF
    sed "${1}q;d" $tmpFolder
}

function fvim() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: fvim [index]
Open the file from `f` results in vim. You have to use `f` first.
EOF
    vim $(sed "${1}q;d" $tmpFolder)
}

function fcode() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: fvim [index]
Open the file from `f` results in Visual Studio Code. You have to use `f` first.
EOF
    code $(sed "${1}q;d" $tmpFolder)
}

function idea() {
    local idea_path="/Applications/IntelliJ IDEA.app"
    [[ ! -e "$idea_path" ]] && (>&2 echo "IntelliJ IDEA is not installed.") && exit 1
    open -a "$idea_path" .
}

nvm() {
    unset -f nvm
    export NVM_DIR=~/.nvm
    source $(brew --prefix nvm)/nvm.sh
    nvm "$@"
}

node() {
    unset -f node
    export NVM_DIR=~/.nvm
    source $(brew --prefix nvm)/nvm.sh
    node "$@"
}

npm() {
    unset -f npm
    export NVM_DIR=~/.nvm
    source $(brew --prefix nvm)/nvm.sh
    source <(npm completion)
    npm "$@"
}

